workflow:
  rules:
    - when: always

variables:  
  DOTNET_IMAGE: "mcr.microsoft.com/dotnet/sdk:7.0" # Default image   for gitlabrunner
  DOCKER_IMAGE: "docker:stable"
  NODE_IMAGE: "node:18"  
  SOLUTION_FOLDER: "CSV-Com"
  SOLUTION: "$SOLUTION_FOLDER/CSV-Com.sln"
  NODE_FOLDER: "webapp"
  BUILD_CONFIGURATION: "Debug"
  DOTNET_DOCKER_IMAGE_NAME_DEV: "$CI_REGISTRY/client-volgsysteem/cvs-com/dev-api"
  NODE_DOCKER_IMAGE_NAME_DEV: "$CI_REGISTRY/client-volgsysteem/cvs-com/dev-webapp"
  DOTNET_DOCKER_IMAGE_NAME_TEST: "$CI_REGISTRY/client-volgsysteem/cvs-com/test-api"
  NODE_DOCKER_IMAGE_NAME_TEST: "$CI_REGISTRY/client-volgsysteem/cvs-com/test-webapp"
  DOTNET_DOCKER_IMAGE_FILENAME: "dotnet_docker_image"
  NODE_DOCKER_IMAGE_FILENAME: "node_docker_image"

stages: 
  - build
  - test     
  - image-build-sync-dev
  - image-build-sync-test

dotnet-build:
  before_script:
  - shopt -s globstar # setting for enabling wildcards in bash **/*.csproj
  - 'dotnet restore $SOLUTION' # dotnet build does also restore but an explicit restore is better when using GitLab for caching purposes
  stage: build
  script:
    # Build all .NET projects
    - | 
      for project in **/*.csproj; do
        dotnet build "$project" -c $BUILD_CONFIGURATION --no-restore
      done
  image: $DOTNET_IMAGE
  artifacts:
    paths:
      - '**/bin'

dotnet-test:
  stage: test
  script:
    - dotnet test $SOLUTION -c $BUILD_CONFIGURATION --collect:"XPlat Code Coverage" --logger "junit;LogFileName=TestResults.xml" # Run and publish testresults with junit to gitlab
  image: $DOTNET_IMAGE
  artifacts:
    paths:
      - '**/TestResults.xml'
      - '**/coverage.cobertura.xml'
    reports:
      coverage_report:
        coverage_format: cobertura
        path: '**/coverage.cobertura.xml'
      junit: 
        - '**/TestResults.xml'
    when: always  # Keep result files. Even when tests fail.
  dependencies:
    - dotnet-build

node-build:
  before_script:
  - cd $SOLUTION_FOLDER/$NODE_FOLDER
  - npm install
  - export CI=false
  stage: build
  script:
  - yarn build
  image: $NODE_IMAGE
  artifacts:
    paths:
      - '$SOLUTION_FOLDER/$NODE_FOLDER/build/'

node-test:
  before_script:
    - cd $SOLUTION_FOLDER/$NODE_FOLDER
    - yarn install
  stage: test
  script:
    - npx nyc --reporter=cobertura npm run test:ci
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  artifacts:
    paths: # NOTE: Is it even necessary to artifact these files if their already being used in the reports? Keep this until we are sure that codecoverage is working
      - '**/junit.xml'
      - '**/coverage/'
      - '**/coverage-final.json'
    when: always
    reports:
      junit:
        - '**/junit.xml'
      coverage_report:
        coverage_format: cobertura
        path: '**/coverage-final.json'
  image: $NODE_IMAGE
  dependencies:
    - node-build
    
image-build-sync-dev-job:
  services:
  - name: docker:20.10.16-dind
  before_script:
  - "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
  - apk add --update curl
  stage: image-build-sync-dev  
  script:
    # Dotnet build  
    - cd CSV-Com
    - docker build --build-arg ENVIRONMENT_NAME=ocdev -t $DOTNET_DOCKER_IMAGE_NAME_DEV -f "./API/Dockerfile" "."
    - cd ..
    - mkdir image
    - docker save $DOTNET_DOCKER_IMAGE_NAME_DEV > image/${DOTNET_DOCKER_IMAGE_FILENAME}.tar
    # Node build
    - cd CSV-Com/webapp
    - docker build --build-arg ENVIRONMENT_NAME=ocdev -t $NODE_DOCKER_IMAGE_NAME_DEV -f "./Dockerfile" "."
    - cd ../..
    - docker save $NODE_DOCKER_IMAGE_NAME_DEV > image/${NODE_DOCKER_IMAGE_FILENAME}.tar
    # Docker push
    - docker push $DOTNET_DOCKER_IMAGE_NAME_DEV
    - docker push $NODE_DOCKER_IMAGE_NAME_DEV
    - echo refreshing environments
    - curl -m 300 "http://192.168.1.15:6012/environment_refresh?s=${ENV_REFRESH_SECRET}"
  image: $DOCKER_IMAGE
  retry: 2
  artifacts:
    paths:
      - image

image-build-sync-test-job:
  services:
  - name: docker:20.10.16-dind
  before_script:
  - "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
  - apk add --update curl
  stage: image-build-sync-test  
  script:
    # Dotnet build  
    - cd CSV-Com
    - docker build --build-arg ENVIRONMENT_NAME=test -t $DOTNET_DOCKER_IMAGE_NAME_TEST -f "./API/Dockerfile" "."
    - cd ..
    # Node build
    - cd CSV-Com/webapp
    - docker build --build-arg ENVIRONMENT_NAME=test -t $NODE_DOCKER_IMAGE_NAME_TEST -f "./Dockerfile" "."
    - cd ../..
    # Docker push
    - docker push $DOTNET_DOCKER_IMAGE_NAME_TEST
    - docker push $NODE_DOCKER_IMAGE_NAME_TEST
    - echo refreshing environments
    - curl -m 300 "http://192.168.1.15:6012/environment_refresh?s=${ENV_REFRESH_SECRET}"
  image: $DOCKER_IMAGE
  retry: 2
  allow_failure: true
  rules:
  - when: manual  