workflow:
  rules:
    - when: always

variables:  
  DOTNET_IMAGE: "mcr.microsoft.com/dotnet/sdk:7.0" # Default image   for gitlabrunner
  DOCKER_IMAGE: "docker:stable"
  NODE_IMAGE: "node:18"  
  SOLUTION_FOLDER: "CSV-Com"
  SOLUTION: "$SOLUTION_FOLDER/CSV-Com.sln"
  NODE_FOLDER: "webapp"
  DOCKER_API_FOLDER: "Docker.API"
  BUILD_CONFIGURATION: "Debug"
  DOTNET_DOCKER_IMAGE_NAME_DEV: "$CI_REGISTRY/client-volgsysteem/cvs-com/dev-api"
  NODE_DOCKER_IMAGE_NAME_DEV: "$CI_REGISTRY/client-volgsysteem/cvs-com/dev-webapp"
  DOTNET_DOCKER_IMAGE_NAME_TEST: "$CI_REGISTRY/client-volgsysteem/cvs-com/test-api"
  NODE_DOCKER_IMAGE_NAME_TEST: "$CI_REGISTRY/client-volgsysteem/cvs-com/test-webapp"
  DOTNET_DOCKER_IMAGE_FILENAME: "dotnet_docker_image"
  NODE_DOCKER_IMAGE_FILENAME: "node_docker_image"

stages: 
  - build
  - test   
  - preparations
  - deployment

dotnet-build:
  before_script:
  - shopt -s globstar # setting for enabling wildcards in bash **/*.csproj
  - 'dotnet restore $SOLUTION' # dotnet build does also restore but an explicit restore is better when using GitLab for caching purposes
  stage: build
  script:
    # Build all .NET projects
    - | 
      for project in **/*.csproj; do
        dotnet build "$project" -c $BUILD_CONFIGURATION --no-restore
      done
  image: $DOTNET_IMAGE
  artifacts:
    paths:
      - '**/bin'

dotnet-test:
  stage: test
  script:
    - export ASPNETCORE_ENVIRONMENT=ocdev
    - cd CSV-Com  
    - dotnet test -c $BUILD_CONFIGURATION --collect:"XPlat Code Coverage" # Run and publish testresults with junit to gitlab
  image: $DOTNET_IMAGE
  artifacts:
    paths:
      - '**/TestResults.xml'
      - '**/coverage.cobertura.xml'
    reports:
      coverage_report:
        coverage_format: cobertura
        path: '**/coverage.cobertura.xml'
      junit: 
        - '**/TestResults.xml'
    when: always  # Keep result files. Even when tests fail.
  needs: [ "dotnet-build" ]

node-build:
  before_script:
  - cd $SOLUTION_FOLDER/$NODE_FOLDER
  - if [ -f "package-lock.json" ]; then
  - echo "Please remove package-lock.json and don't use 'npm install', use 'yarn install' and 'yarn add' instead."
  - exit 1
  - fi
  - yarn cache clean && yarn install
  - export CI=false
  stage: build
  script:
  - yarn build
  image: $NODE_IMAGE
  artifacts:
    paths:
      - '$SOLUTION_FOLDER/$NODE_FOLDER/build/'

node-test:
  before_script:
    - cd $SOLUTION_FOLDER/$NODE_FOLDER
    - yarn install
  stage: test
  script:
    - npx nyc --reporter=cobertura npm run test:ci
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  artifacts:
    paths: # NOTE: Is it even necessary to artifact these files if their already being used in the reports? Keep this until we are sure that codecoverage is working
      - '**/junit.xml'
      - '**/coverage/'
      - '**/coverage-final.json'
    when: always
    reports:
      junit:
        - '**/junit.xml'
      coverage_report:
        coverage_format: cobertura
        path: '**/coverage-final.json'
  image: $NODE_IMAGE
  needs: [ "node-build" ]
    
upload-images-dev:
  services:
  - name: docker:dind
  before_script:
  - "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
  - apk add --update curl
  stage: preparations
  script:
    # Dotnet build  
    - cd CSV-Com
    - docker build --build-arg ENVIRONMENT_NAME=ocdev -t $DOTNET_DOCKER_IMAGE_NAME_DEV -f "./API/Dockerfile" "."
    - cd ..
    - mkdir image
    - docker save $DOTNET_DOCKER_IMAGE_NAME_DEV > image/${DOTNET_DOCKER_IMAGE_FILENAME}.tar
    # Node build
    - cd CSV-Com/webapp
    - docker build --build-arg ENVIRONMENT_NAME=ocdev -t $NODE_DOCKER_IMAGE_NAME_DEV -f "./Dockerfile" "."
    - cd ../..
    - docker save $NODE_DOCKER_IMAGE_NAME_DEV > image/${NODE_DOCKER_IMAGE_FILENAME}.tar
    # Docker push
    - docker push $DOTNET_DOCKER_IMAGE_NAME_DEV
    - docker push $NODE_DOCKER_IMAGE_NAME_DEV
  image: $DOCKER_IMAGE
  needs: [ "node-test", "dotnet-test" ]
  artifacts:
    paths:
      - image

deploy-latest-images:
  stage: deployment
  script:
    - secret="$ENV_REFRESH_SECRET"
    # Step 1: Call the first URL with the provided secret and store the response as "identifier"
    - FIRST_URL="http://cvs-dev.sbict.local:6021/DockerInternal/refresh_environments?s=$secret"
    - identifier=$(curl -s "$FIRST_URL")
    - echo "Running refresh job:"
    - echo "$identifier"
    # Step 2: Keep checking the second URL until the response is not "Loading"
    - SECOND_URL="http://cvs-dev.sbict.local:6021/DockerInternal/check_job?identifier=$identifier"
    - while [[ "$(curl -s "$SECOND_URL")" == "Loading" ]]; do
    -     echo "Waiting for job to finish"
    -     sleep 5
    - done
    # Step 3: Call the third URL and display the response
    - THIRD_URL="http://cvs-dev.sbict.local:6021/DockerInternal/job_result?identifier=$identifier"
    - response=$(curl -s "$THIRD_URL")
    - echo "Job result:"
    - echo "$response"
  image: $DOTNET_IMAGE
  needs: [ "upload-images-dev" ]

copy-files-docker-api:
  stage: preparations
  script:
    - secret="$ENV_REFRESH_SECRET"   
    - cd $SOLUTION_FOLDER/$DOCKER_API_FOLDER
    - cp -rf . /var/docker-internal-server/
    - cd /var/docker-internal-server/
    - sed -i "s/"secret"/"${secret}"/g" ./appsettings.json
    - dotnet restore
    - dotnet build
    - chmod +x /var/docker-internal-server/Scripts/environment_refresh
  image: $DOTNET_IMAGE
  needs: [ "dotnet-build" ]
  allow_failure: true
  rules:
  - changes:
    - $SOLUTION_FOLDER/$DOCKER_API_FOLDER/**/*.cs # all C# files in the Docker.API project folder
    #  rules:
    #  - when: manual  

deploy-latest-docker-api:
  stage: deployment
  script:
    - secret="$ENV_REFRESH_SECRET"  
    - FIRST_URL="http://cvs-dev.sbict.local:6021/DockerInternal/exit?s=$secret"
    - curl -f -s "$FIRST_URL"
    - echo "Killing server, it should be automatically rebooted"
  image: $DOTNET_IMAGE
  needs: [ "copy-files-docker-api" ]
  allow_failure: true