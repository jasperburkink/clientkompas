workflow:
  rules:
    - when: always

variables:  
  DOTNET_IMAGE: "mcr.microsoft.com/dotnet/sdk:9.0" # Default image   for gitlabrunner
  DOCKER_IMAGE: "docker:stable"
  NODE_IMAGE: "node:lts"  
  SOLUTION_FOLDER: "CSV-Com"
  SOLUTION: "$SOLUTION_FOLDER/CSV-Com.sln"
  NODE_FOLDER: "webapp"
  BUILD_CONFIGURATION: "Debug"

stages: 
  - build
  - test
  # - coverage TODO: Enable when codecoverage works. See task https://sbict.atlassian.net/browse/CVS-521

dotnet-build:
  before_script:
  - shopt -s globstar # setting for enabling wildcards in bash **/*.csproj
  - 'dotnet restore $SOLUTION' # dotnet build does also restore but an explicit restore is better when using GitLab for caching purposes
  stage: build
  script:
    # Build all .NET projects
    - | 
      for project in **/*.csproj; do
        dotnet build "$project" -c $BUILD_CONFIGURATION --no-restore
      done
  image: $DOTNET_IMAGE
  artifacts:
    paths:
      - '**/bin'
      - '**/obj'
    expire_in: 1 day

dotnet-test:
  stage: test
  variables:
    LOGGER_FLAG: "junit;LogFilePath=./TestResults/test-results.xml;MethodFormat=Class;FailureBodyFormat=Verbose"
  script:
    - export ASPNETCORE_ENVIRONMENT=ocdev
    - cd $SOLUTION_FOLDER
    - |
      dotnet test \
        -c $BUILD_CONFIGURATION \
        --no-build \
        --no-restore \
        --logger "$LOGGER_FLAG" \
        --results-directory "./TestResults" \
  image: $DOTNET_IMAGE
  artifacts:
    paths:
      - $SOLUTION_FOLDER/**/TestResults/**/test-results.xml
    reports:
      junit: $SOLUTION_FOLDER/**/TestResults/**/test-results.xml
    when: always
  needs: ["dotnet-build"]
  dependencies:
    - dotnet-build

# TODO: Enable when codecoverage works. See task https://sbict.atlassian.net/browse/CVS-521
# Coverage can not be retrieved while running tests on a artifact. Also coverage is only needed when running on merge-requests.
# dotnet-coverage:
#   stage: coverage
#   before_script:
#     - apt-get update && apt-get install -y --no-install-recommends libc6-dev libxml2
#     - dotnet tool install --global dotnet-coverage
#     - export PATH="$PATH:/root/.dotnet/tools"
#   script:
#     - export ASPNETCORE_ENVIRONMENT=ocdev
#     - cd $SOLUTION_FOLDER
#     - |
#       RESULTS_DIR="./TestResults"
#       mkdir -p $RESULTS_DIR
#       for project in $(find . -name '*Tests.csproj'); do
#         echo "Collecting coverage for $project"
#         pushd $(dirname $project)
#         dotnet-coverage collect dotnet test -f cobertura -o $RESULTS_DIR/coverage-$(basename $project .csproj).xml
#         popd
#       done
#   image: $DOTNET_IMAGE
#   artifacts:
#     paths:
#       - $SOLUTION_FOLDER/**/TestResults/coverage-*.xml
#     reports:
#       coverage_report:
#         coverage_format: cobertura
#         path: $SOLUTION_FOLDER/**/TestResults/coverage-*.xml
#     when: always
#   coverage: '/TOTAL\s+\d+%\s+\d+/'
#   needs: ["dotnet-test"]
#   dependencies:
#     - dotnet-test

node-build:
  before_script:
    - cd $SOLUTION_FOLDER/$NODE_FOLDER
    - |
      if [ -f "package-lock.json" ]; then
        echo "Please remove package-lock.json and don't use 'npm install', use 'yarn install' and 'yarn add' instead."
        exit 1
      fi
    - yarn cache clean && yarn install
    - export CI=false
  stage: build
  script:
    - yarn build
  image: $NODE_IMAGE
  artifacts:
    paths:
      - '$SOLUTION_FOLDER/$NODE_FOLDER/build/'
      - '$SOLUTION_FOLDER/$NODE_FOLDER/node_modules/'
    expire_in: 1 day

node-test:
  before_script:
    - cd $SOLUTION_FOLDER/$NODE_FOLDER
  stage: test
  script:
    - npx nyc --reporter=cobertura npm run test:ci
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  artifacts:
    paths:
      - $SOLUTION_FOLDER/$NODE_FOLDER/**/junit.xml
      - $SOLUTION_FOLDER/$NODE_FOLDER/**/coverage/
      - $SOLUTION_FOLDER/$NODE_FOLDER/**/coverage-final.json
    when: always
    reports:
      junit:
        - $SOLUTION_FOLDER/$NODE_FOLDER/**/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: $SOLUTION_FOLDER/$NODE_FOLDER/**/coverage-final.json
  image: $NODE_IMAGE
  needs: ["node-build"]
  dependencies:
    - node-build