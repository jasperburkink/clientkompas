workflow:
  rules:
    - when: always

variables:  
  DOTNET_IMAGE: "mcr.microsoft.com/dotnet/sdk:8.0" # Default image   for gitlabrunner
  DOCKER_IMAGE: "docker:stable"
  NODE_IMAGE: "node:21"  
  SOLUTION_FOLDER: "CSV-Com"
  SOLUTION: "$SOLUTION_FOLDER/CSV-Com.sln"
  NODE_FOLDER: "webapp"
  BUILD_CONFIGURATION: "Debug"

stages: 
  - build
  - test

dotnet-build:
  before_script:
  - shopt -s globstar # setting for enabling wildcards in bash **/*.csproj
  - 'dotnet restore $SOLUTION' # dotnet build does also restore but an explicit restore is better when using GitLab for caching purposes
  stage: build
  script:
    # Build all .NET projects
    - | 
      for project in **/*.csproj; do
        dotnet build "$project" -c $BUILD_CONFIGURATION --no-restore
      done
  image: $DOTNET_IMAGE
  artifacts:
    paths:
      - '**/bin'

dotnet-test:
  stage: test
  variables:
    CONFIGURATION: "Debug"
    COVERAGE_FLAG: "XPlat Code Coverage"
    LOGGER_FLAG: "junit;LogFilePath=./TestResults/test-results.xml;MethodFormat=Class;FailureBodyFormat=Verbose"
  script:
    - export ASPNETCORE_ENVIRONMENT=ocdev
    - cd $SOLUTION_FOLDER
    - dotnet test -c $BUILD_CONFIGURATION --logger "$LOGGER_FLAG" --collect:"$COVERAGE_FLAG"
    - ls -R .
  image: $DOTNET_IMAGE
  artifacts:
    paths:
      - $SOLUTION_FOLDER/**/TestResults/**/test-results.xml
      - $SOLUTION_FOLDER/**/TestResults/**/*.cobertura.xml
    reports:
      junit: $SOLUTION_FOLDER/**/TestResults/**/test-results.xml
      coverage_report:
        coverage_format: cobertura
        path: $SOLUTION_FOLDER/**/TestResults/**/*.cobertura.xml
    when: always
  needs: ["dotnet-build"]

node-build:
  before_script:
  - cd $SOLUTION_FOLDER/$NODE_FOLDER
  - if [ -f "package-lock.json" ]; then
  - echo "Please remove package-lock.json and don't use 'npm install', use 'yarn install' and 'yarn add' instead."
  - exit 1
  - fi
  - yarn cache clean && yarn install
  - export CI=false
  stage: build
  script:
  - yarn build
  image: $NODE_IMAGE
  artifacts:
    paths:
      - '$SOLUTION_FOLDER/$NODE_FOLDER/build/'

node-test:
  before_script:
    - cd $SOLUTION_FOLDER/$NODE_FOLDER
    - yarn install
  stage: test
  script:
    - npx nyc --reporter=cobertura npm run test:ci
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  artifacts:
    paths: # NOTE: Is it even necessary to artifact these files if their already being used in the reports? Keep this until we are sure that codecoverage is working
      - '**/junit.xml'
      - '**/coverage/'
      - '**/coverage-final.json'
    when: always
    reports:
      junit:
        - '**/junit.xml'
      coverage_report:
        coverage_format: cobertura
        path: '**/coverage-final.json'
  image: $NODE_IMAGE
  needs: [ "node-build" ]